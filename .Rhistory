}
query_dataset %>%
Seurat::FetchData(var_name) %>%
extract2(1) %>% #result is a DF; flatten it to a vector
unique %>%
length
}
sapply(resolutions_to_try, get_number_of_clusters) %>%
plot(x = resolutions_to_try, y = ., ylab = "Number of clusters", main = "Varying the resolution")
query_dataset %<>% Seurat::RunUMAP(dims = 1:100)
Seurat::DimPlot(query_dataset, group.by = "RNA_snn_res.2")
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST")
query_sce = as.SingleCellExperiment(x = query_dataset)
rowData(query_sce)$feature_symbol = GetAssayData(query_dataset, "RNA", slot = "data") %>% rownames
query_sce %<>% scmapCluster( list( metadata(reference_cell_atlas)$scmap_cluster_index ), threshold = 0 )
query_dataset %<>% AddMetaData(query_sce[["scmap_cluster_labs"]] %>% set_rownames(Cells(query_dataset)),
col.name = "scmap_cluster_labs")
DimPlot(query_dataset, group.by = "scmap_cluster_labs")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T) + theme(legend.position = F)
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T) + theme(legend.position = "none")
hist(query_sce$scmap_cluster_siml)
query_sce %<>% scmapCluster( list( metadata(reference_cell_atlas)$scmap_cluster_index ), threshold = 0.3 )
query_sce = as.SingleCellExperiment(x = query_dataset)
rowData(query_sce)$feature_symbol = GetAssayData(query_dataset, "RNA", slot = "data") %>% rownames
query_sce %<>% scmapCluster( list( metadata(reference_cell_atlas)$scmap_cluster_index ), threshold = 0.3 )
query_dataset %<>% AddMetaData(query_sce[["scmap_cluster_labs"]] %>% set_rownames(Cells(query_dataset)),
col.name = "scmap_cluster_labs")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T) + theme(legend.position = "none")
unsupervised_cluster = query_dataset@active.ident
unsupervised_cluster
supervised_class = query_dataset$scmap_cluster_labs
X = table(unsupervised_cluster, supervised_class)
X[1:4, 1:4]
X %>%
as.matrix %>%
apply(2, which.max) %>%
extract(colnames(X), .)
X %>%
as.matrix %>%
apply(1, which.max) %>%
extract(colnames(X), .)
dim(X)
colnames(X)
X %>%
as.matrix %>%
apply(2, which.max) %>% length
X %>%
as.matrix %>%
apply(1, which.max) %>% length
X %>%
as.matrix %>%
apply(1, which.max) %>%
extract(colnames(X), .)
get_most_frequent_label = function(unsupervised_cluster, supervised_class){
X = table(unsupervised_cluster, supervised_class)
data.frame(
unsupervised_cluster = rownames(X),
most_frequent_supervised_class = X %>%
as.matrix %>%
apply(1, which.max) %>%
extract(colnames(X), .)
)
}
get_most_frequent_label(unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs)
matches = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
) %>%
merge(FetchData(query_dataset, "ident"), by.y = "ident", by.x = "unsupervised_cluster")
dim(matches)
head(matches)
matches = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
) %>%
merge(FetchData(query_dataset, "ident"), ., by.x = "ident", by.y = "unsupervised_cluster") %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident,
supervised_class = query_dataset$scmap_cluster_labs
)
matches_by_cell %>%
merge(FetchData(query_dataset, "ident"),
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster") %>%
set_rownames(Cells(query_dataset))
FetchData(query_dataset, "ident"),
matches_by_cell = merge(
FetchData(query_dataset, "ident"),
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
colnames(matches)
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T) +
theme(legend.position = "none")
matches_by_cluster
query_dataset@active.ident
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident %>% as.character,
supervised_class = query_dataset$scmap_cluster_labs %>% as.character,
stringsAsFactors = F
)
matches_by_cluster = get_most_frequent_label(
unsupervised_cluster = query_dataset@active.ident %>% as.character,
supervised_class = query_dataset$scmap_cluster_labs %>% as.character
)
head(matches_by_cluster)
matches_by_cluster$unsupervised_cluster
matches_by_cluster$most_frequent_supervised_class
FetchData(query_dataset, "ident")
fix_fucking_factors = function(X) {
for(cc in colnames(X)){
if(is.factor(X[[cc]])){
X[[cc]] %<>% as.character
}
}
}
matches_by_cell = merge(
FetchData(query_dataset, "ident") %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
fix_fucking_factors = function(X) {
for(cc in colnames(X)){
if(is.factor(X[[cc]])){
X[[cc]] %<>% as.character
}
}
X
}
matches_by_cell = merge(
FetchData(query_dataset, "ident") %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
) %>%
set_rownames(Cells(query_dataset))
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
FetchData(query_dataset, "ident") %>% fix_fucking_factors
FetchData(query_dataset, "ident") %>% fix_fucking_factors %>% head
FetchData(query_dataset, "ident") %>% fix_fucking_factors %>% extract2("ident")
matches_by_cell = merge(
FetchData(query_dataset, c("ident", "cell")) %>% fix_fucking_factors,
matches_by_cluster,
by.x = "ident",
by.y = "unsupervised_cluster"
)
rownames(matches_by_cell) = matches_by_cell$cell
query_dataset %<>% AddMetaData(matches[, 2, drop = F])
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
head(matches_by_cell)
matches_by_cluster
X
X[1, ]
X[2, ]
X[3, ]
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = T) +
theme(legend.position = "none")
matches_by_cluster
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
matches_by_cell
matches[, 2, drop = F]
table(matches[, 2, drop = F])
query_dataset %<>% AddMetaData(matches[, 2, drop = F], col.name = most_frequent_supervised_class)
query_dataset %<>% AddMetaData(matches[, 2, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = F) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
X %>%
as.matrix
X %>%
as.matrix %>% heatmap
X %>%
as.matrix %>% t %>% heatmap
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class)
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class) %>% View
table(matches_by_cluster$unsupervised_cluster, matches_by_cluster$most_frequent_supervised_class) %>% View
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "scmap_cluster_labs", label = T, repel = T) +
theme(legend.position = "none")
DimPlot(query_dataset, group.by = "ident", label = T, repel = F) +
theme(legend.position = "none")
table(matches_by_cell$unsupervised_cluster, matches_by_cell$most_frequent_supervised_class) %>% View
table(matches_by_cell$ident, matches_by_cell$most_frequent_supervised_class) %>% View
rm(matches)
query_dataset %<>% AddMetaData(matches_by_cell[, 2, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
head(matches_by_cell)
query_dataset %<>% AddMetaData(matches_by_cell[, 3, drop = F], col.name = "most_frequent_supervised_class")
DimPlot(query_dataset, group.by = "most_frequent_supervised_class", label = T) +
theme(legend.position = "none")
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
# Marker heatmap
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 0.5)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 0.5)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1)
de_genes = Seurat::FindAllMarkers(query_dataset, test.use = "MAST", logfc.threshold = 1.5)
Sys.time()
Sys.time() - Sys.time()
plot( Sys.time() - Sys.time() )
t1 = Sys.time()
t1 +
3
t1
t1 + 30
?Sys.time
evaluations = runAllBenchmarks(num_include = nrow(signatures), output_dir = "all")
source('~/Desktop/jhu/research/projects/predictcmap/test_scaling.R', echo=TRUE)
+1
rlookc::generateLooks
?rlookc::generateLooks
seq(0)
seq(1)
seq(0, 0)
seq(0, 1)
seq(0, 2)
seq(1, 1)
append(1:5, 5, 6)
append(1:5, 5, 4)
append(1:5, 5, 2)
append(1:5, 5, 0)
append(1:5, NA, 0)
append(1:5, NA, 1)
?knockoff::create.second_order
setwd("~/Desktop/jhu/research/projects/knockoffs/applications/share-seq/")
library(ggplot2)
library(Matrix)
library(magrittr)
data_dir = "~/Desktop/jhu/research/datalake/share_seq/skin"
set.seed(0)
# Load data
pseudo_bulk_atac     = read.csv("input_pseudobulk/atac_pseudo_bulk.csv",  row.names = 1) %>% as.matrix
pseudo_bulk_rna      = read.csv("input_pseudobulk/rna_pseudo_bulk.csv",   row.names = 1) %>% as.matrix
pseudo_bulk_metadata = read.csv("input_pseudobulk/metacell_metadata.csv", row.names = 1)
cell_count_cutoff = 100
table(pseudo_bulk_metadata$total_cell_count >= cell_count_cutoff)
metacells_keep = pseudo_bulk_metadata$total_cell_count >= cell_count_cutoff
pseudo_bulk_atac     %<>% extract( , metacells_keep)
pseudo_bulk_rna      %<>% extract( , metacells_keep)
pseudo_bulk_metadata %<>% extract( metacells_keep , )
withr::with_dir( data_dir, {
skin_atac_peaks = read.csv("GSM4156597_skin.late.anagen.peaks.bed.gz",
sep = "\t", header = F)
})
tf_fields = c("Species",   "Symbol" ,   "Ensembl", "Family", "Entrez.ID")
mouse_tf_atfdb = rbind(
read.csv("~/Desktop/jhu/research/datalake/mouse_tfs/Mus_musculus_TF.txt", sep = "\t")[tf_fields],
read.csv("~/Desktop/jhu/research/datalake/mouse_tfs/Mus_musculus_TF_cofactors.txt", sep = "\t")[tf_fields]
)
dim(mouse_tf_atfdb)
table(pseudo_bulk_metadata$total_cell_count >= cell_count_cutoff)
shrink_by
setwd("~/Desktop/jhu/research/projects/knockoffs/applications/share-seq/")
library(ggplot2)
library(Matrix)
library(magrittr)
data_dir = "~/Desktop/jhu/research/datalake/share_seq/skin"
set.seed(0)
# Load data
pseudo_bulk_atac     = read.csv("input_pseudobulk/atac_pseudo_bulk.csv",  row.names = 1) %>% as.matrix
pseudo_bulk_rna      = read.csv("input_pseudobulk/rna_pseudo_bulk.csv",   row.names = 1) %>% as.matrix
pseudo_bulk_metadata = read.csv("input_pseudobulk/metacell_metadata.csv", row.names = 1)
cell_count_cutoff = 100
table(pseudo_bulk_metadata$total_cell_count >= cell_count_cutoff)
metacells_keep = pseudo_bulk_metadata$total_cell_count >= cell_count_cutoff
pseudo_bulk_atac     %<>% extract( , metacells_keep)
pseudo_bulk_rna      %<>% extract( , metacells_keep)
pseudo_bulk_metadata %<>% extract( metacells_keep , )
withr::with_dir( data_dir, {
skin_atac_peaks = read.csv("GSM4156597_skin.late.anagen.peaks.bed.gz",
sep = "\t", header = F)
})
tf_fields = c("Species",   "Symbol" ,   "Ensembl", "Family", "Entrez.ID")
mouse_tf_atfdb = rbind(
read.csv("~/Desktop/jhu/research/datalake/mouse_tfs/Mus_musculus_TF.txt", sep = "\t")[tf_fields],
read.csv("~/Desktop/jhu/research/datalake/mouse_tfs/Mus_musculus_TF_cofactors.txt", sep = "\t")[tf_fields]
)
dim(mouse_tf_atfdb)
# Normalize RNA data by total counts. Exclude genes below 1 CPM. Scale genes.
pseudo_bulk_rna = sweep(pseudo_bulk_rna, 2, colSums(pseudo_bulk_rna), FUN = "/")
pseudo_bulk_rna %<>% t
pseudo_bulk_rna = pseudo_bulk_rna[,1e6*colSums(pseudo_bulk_rna) >= 1]
pseudo_bulk_rna = scale(pseudo_bulk_rna)
mouse_tf_expression     = pseudo_bulk_rna[,  colnames(pseudo_bulk_rna) %in% mouse_tf_atfdb$Symbol]
mouse_non_tf_expression = pseudo_bulk_rna[,!(colnames(pseudo_bulk_rna) %in% mouse_tf_atfdb$Symbol)]
# TODO: Condition on RNA alone, then RNA + ATAC.
for(blah in c("none", "atac_lsi")){
}
shrink_by = corpcor::estimate.lambda(mouse_tf_expression)
Sigma = corpcor::cov.shrink(x = mouse_tf_expression, lambda = shrink_by, lambda.var = 0 )
Sigma = as(Sigma, "matrix")
# Since the target is sometimes a TF, use fast leave-one-out knockoffs (LOOKs).
# This output represents all of them implicitly in a compact form.
# Realize leave-one-out knockoffs later on using rlookc::formOneLook().
# This output also contains the full knockoffs (no variables omitted).
t1 = Sys.time()
looks_compact = rlookc::generateLooks(
mouse_tf_expression,
mu = colMeans(mouse_tf_expression),
Sigma = Sigma,
output_type = "knockoffs_compact",
vars_to_omit = seq(ncol(mouse_tf_expression))
)
t2 = Sys.time()
t2 - t1
shrink_by
looks_compact = rlookc::createHighDimensionalKnockoffs(
mouse_tf_expression, lambda = shrink_by,
mu = colMeans(mouse_tf_expression),
Sigma = Sigma,
output_type = "knockoffs_compact",
vars_to_omit = seq(ncol(mouse_tf_expression))
)
looks_compact = rlookc::createHighDimensionalKnockoffs(
mouse_tf_expression, lambda = shrink_by,
)
dim(looks_compact)
knockoffs = rlookc::createHighDimensionalKnockoffs(
mouse_tf_expression, lambda = shrink_by,
)
saveRDS(looks_compact, "input_pseudobulk/knockoffs_mincell=100.Rda")
saveRDS(knockoffs, "input_pseudobulk/knockoffs_mincell=100.Rda")
# This is a fast way to compute variable importance statstics.
dfmax = 21
fast_lasso_penalty = function(X, X_k, y) {
cat(".")
suppressWarnings(
knockoff::stat.lasso_lambdasmax(
y   = y,
X   = X,
X_k = X_k,
dfmax = dfmax
)
)
}
calibration_typical = rlookc::simulateY(
n_sim = 100,
X = mouse_tf_expression,
knockoffs = knockoffs,
statistic = fast_lasso_penalty,
plot_savepath = "calibration/average_case_calibration.pdf"
)
write.csv(calibration_typical$calibration$fdr, "calibration/average_case_calibration.csv")
# Check calibration
dir.create("calibration", showWarnings = F, recursive = T)
calibration_typical = rlookc::simulateY(
n_sim = 100,
X = mouse_tf_expression,
knockoffs = knockoffs,
statistic = fast_lasso_penalty,
plot_savepath = "calibration/average_case_calibration.pdf"
)
write.csv(calibration_typical$calibration$fdr, "calibration/average_case_calibration.csv")
# Find regulators of all genes.
# Deploy on non-TF targets
w = lapply(
X = seq(ncol(mouse_non_tf_expression)),
FUN = function(i){
if(i %% 100 == 0){ cat( "\n" ); cat(i); cat(" ")}
fast_lasso_penalty(
y   = mouse_non_tf_expression[,i],
X   = mouse_tf_expression,
X_k = knockoffs
)
}
)
length(w[[1]])
length(w)
# Deploy on TF targets
w_tf = list()
for(i in seq(ncol(mouse_tf_expression))){
if(i %% 100 == 0){ cat( "\n" ); cat(i); cat(" ")}
# knockoffs_minus_i = rlookc::formOneLook(
#   knockoffs = looks_compact$knockoffs,
#   updates = looks_compact$updates,
#   vars_to_omit = looks_compact$vars_to_omit,
#   k = i
# )
knockoffs_minus_i = knockoffs[,-i]
w_tf[[i]] = fast_lasso_penalty(
y   = mouse_tf_expression[,i],
X   = mouse_tf_expression[,-i],
X_k = knockoffs_minus_i
)
}
dir.create("output_knockoffs", recursive = T, showWarnings = F)
saveRDS(w, "output_knockoffs/w.Rds")
saveRDS(w_tf, "output_knockoffs/wtf.Rds")
# Assemble results nicely
DF_tf_target = DF_tf_tf = list()
for(k in seq(ncol(mouse_tf_expression))){
DF_tf_tf[[k]] = data.frame(
Gene1 = colnames(mouse_tf_expression)[-k],
Gene2 = colnames(mouse_tf_expression)[ k],
knockoff_stat = w_tf[[k]]
) %>%
subset(abs(knockoff_stat) > 0)
}
for(k in seq(ncol(mouse_non_tf_expression))){
DF_tf_target[[k]] = data.frame(
Gene1 = colnames(mouse_tf_expression),
Gene2 = colnames(mouse_non_tf_expression)[ k],
knockoff_stat = w[[k]]
) %>%
subset(abs(knockoff_stat) > 0)
}
rm("w", "w_tf"); gc()
DF_tf_tf = data.table::rbindlist(DF_tf_tf)
DF_tf_target = data.table::rbindlist(DF_tf_target)
write.csv(DF_tf_tf, "output_knockoffs/knockoff_stats.csv")
rm("DF_tf_tf"); gc()
write.csv(DF_tf_target, "output_knockoffs/knockoff_stats.csv", append = T, col.names = F)
rm("DF_tf_target"); gc()
DF = read.csv("output_knockoffs/knockoff_stats.csv")
DF$q = DF$knockoff_stat %>% rlookc::knockoffQvals(offset = 0)
# How much signal is there?
plot(ecdf(DF$q), xlim = 0:1)
hist(DF$q, xlab = "Knockoff q-values", ylab = "How many hits", main = "\"Power\"")
sum(DF$q<0.1)
sum(DF$q<0.2)
sum(DF$q<0.3)
sum(DF$q<0.4)
sum(DF$q<0.5)
# Load chip-atlas target gene lists
chip_files =
list.files("~/Desktop/jhu/research/datalake/chip-atlas/mouse/targets", full = T)
mouse_chip =
lapply(chip_files, read.csv, sep = "\t", header = T) %>%
lapply(extract2, 1) %>%
mapply(
function(X, tf) {
data.frame("Gene1" = gsub(".10.tsv$", "", basename(tf)), "Gene2" = X)
},
X = .,
tf = chip_files,
SIMPLIFY = F) %>%
data.table::rbindlist() %>%
dplyr::mutate(is_verified = T)
mouse_chip[["Gene1"]] %>% table %>% View
# This makes true edges correct; the rest is NA and fails to distinguish between
# unknowns and known negatives.
DF %<>% merge(mouse_chip, all.x = T, all.y = F)
# This treats everything as a known negative.
DF[["is_verified"]][is.na(DF[["is_verified"]])] = F
# This fixes unknown edges for ChIP data.
DF[["is_verified"]][ !( DF[["Gene1"]] %in% mouse_chip[["Gene1"]] ) ] = NA
# Compute calibration!
calibration = data.frame(nominal_fdr = c(1:100)/100, empirical_fdr = NA, num_discoveries = NA)
i = 0
for(fdr in calibration$nominal_fdr){
i = i + 1
calibration$empirical_fdr[i] =
DF %>%
subset(q<fdr) %>%
extract2("is_verified") %>%
mean(na.rm = T) %>%
subtract(1, .)
calibration$num_discoveries[i] =
DF %>%
subset(q<fdr) %>%
extract2("is_verified") %>%
is.na %>%
not %>%
sum
}
# Add simple binomial standard errors
calibration %<>% dplyr::mutate( moe_95 = 1.96 * sqrt( empirical_fdr * ( 1 - empirical_fdr ) / num_discoveries ) )
write.csv(calibration, "calibration/chip_calibration.csv")
# Plot and save calibration
ggplot(calibration) +
geom_point(aes(x = nominal_fdr, y = empirical_fdr)) +
geom_errorbar(aes(x = nominal_fdr,
ymin = pmax(0, empirical_fdr - moe_95),
ymax = pmin(1, empirical_fdr + moe_95)
)) +
ggtitle("Calibration vs ChIP-Atlas") +
scale_y_continuous(limits = 0:1)
ggsave("calibration/chip_calibration.pdf", width = 4, height = 4)
